name: Enterprise CI/CD Pipeline

on:
  push:
    branches: [main, develop, release/*, feature/*]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * *'  # Nightly builds at 2 AM UTC
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository_owner }}/figure-collector
  NODE_VERSION: '20'
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # ============================================
  # STAGE 1: Security Scanning & Code Analysis
  # ============================================
  
  security-scan:
    name: Security & Vulnerability Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
      
      # SAST - Static Application Security Testing
      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: javascript, typescript
          queries: security-and-quality
      
      # Dependency vulnerability scanning
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
      
      # Open Source Component Analysis (SCA)
      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'figure-collector-services'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
      
      - name: Upload OWASP results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports/
          retention-days: 30
      
      # License compliance check
      - name: License Scan
        uses: fossas/fossa-action@main
        with:
          api-key: ${{ secrets.FOSSA_API_KEY }}
          branch: ${{ github.ref }}
      
      # Secrets scanning
      - name: Detect secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

  # ============================================
  # STAGE 2: Code Quality Analysis
  # ============================================
  
  code-quality:
    name: Code Quality & Standards
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      # SonarCloud analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      
      # ESLint with security rules
      - name: ESLint Security Analysis
        run: |
          npm install -g eslint eslint-plugin-security
          eslint . --ext .js,.jsx,.ts,.tsx --format json --output-file eslint-results.json || true
      
      - name: Upload ESLint results
        uses: actions/upload-artifact@v4
        with:
          name: eslint-results
          path: eslint-results.json
          retention-days: 30
      
      # TypeScript strict mode verification
      - name: TypeScript Compilation Check
        run: |
          for service in backend frontend page-scraper; do
            echo "Checking $service..."
            cd figure-collector-$service
            npm ci
            npx tsc --noEmit --strict
            cd ..
          done

  # ============================================
  # STAGE 3: Build & Test All Services
  # ============================================
  
  build-test-matrix:
    name: Build & Test - ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality]
    
    strategy:
      fail-fast: false
      matrix:
        service:
          - backend
          - frontend
          - page-scraper
          - version-manager
        include:
          - service: backend
            path: figure-collector-backend
            test-command: npm run test:memory
          - service: frontend
            path: figure-collector-frontend
            test-command: npm test -- --watchAll=false
          - service: page-scraper
            path: page-scraper
            test-command: npm test
          - service: version-manager
            path: version-manager
            test-command: npm test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ matrix.path }}/package-lock.json
      
      - name: Install dependencies
        working-directory: ${{ matrix.path }}
        run: npm ci
      
      - name: Run linting
        working-directory: ${{ matrix.path }}
        run: npm run lint || true
      
      - name: Run unit tests with coverage
        working-directory: ${{ matrix.path }}
        run: |
          ${{ matrix.test-command }} -- --coverage --coverageReporters=json --coverageReporters=lcov --coverageReporters=text
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ${{ matrix.path }}/coverage/lcov.info
          flags: ${{ matrix.service }}
          name: ${{ matrix.service }}-coverage
      
      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.service }}
          path: |
            ${{ matrix.path }}/coverage/
            ${{ matrix.path }}/test-results/
          retention-days: 30
      
      - name: Build service
        working-directory: ${{ matrix.path }}
        run: npm run build || echo "No build script"

  # ============================================
  # STAGE 4: Docker Build & Push
  # ============================================
  
  docker-build:
    name: Docker Build - ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: [build-test-matrix]
    if: github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository
    
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        service:
          - backend
          - frontend
          - page-scraper
          - version-manager
        include:
          - service: backend
            context: ./figure-collector-backend
            dockerfile: Dockerfile
          - service: frontend
            context: ./figure-collector-frontend
            dockerfile: Dockerfile
          - service: page-scraper
            context: ./page-scraper
            dockerfile: Dockerfile
          - service: version-manager
            context: ./version-manager
            dockerfile: Dockerfile
    
    outputs:
      backend-tag: ${{ steps.meta-backend.outputs.tags }}
      frontend-tag: ${{ steps.meta-frontend.outputs.tags }}
      scraper-tag: ${{ steps.meta-page-scraper.outputs.tags }}
      version-tag: ${{ steps.meta-version-manager.outputs.tags }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Generate Docker metadata
        id: meta-${{ matrix.service }}
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value=nightly,enable=${{ github.event_name == 'schedule' }}
            type=sha,prefix={{branch}}-
            type=raw,value={{date 'YYYYMMDD-HHmmss'}}-{{sha}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.context }}/${{ matrix.dockerfile }}
          push: true
          tags: ${{ steps.meta-${{ matrix.service }}.outputs.tags }}
          labels: ${{ steps.meta-${{ matrix.service }}.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            VERSION=${{ steps.meta-${{ matrix.service }}.outputs.version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
      
      - name: Scan Docker image for vulnerabilities
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}-${{ matrix.service }}:${{ steps.meta-${{ matrix.service }}.outputs.version }}
          format: 'sarif'
          output: 'docker-scan-${{ matrix.service }}.sarif'
      
      - name: Upload Docker scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'docker-scan-${{ matrix.service }}.sarif'

  # ============================================
  # STAGE 5: Integration Testing
  # ============================================
  
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker-build]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Compose
        run: |
          docker compose version
          docker buildx create --use
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Update docker-compose with built images
        run: |
          cat > figure-collector-integration-tests/docker-compose.ci.yml << EOF
          version: '3.8'
          services:
            backend-test:
              image: ${{ needs.docker-build.outputs.backend-tag }}
            frontend-test:
              image: ${{ needs.docker-build.outputs.frontend-tag }}
            scraper-test:
              image: ${{ needs.docker-build.outputs.scraper-tag }}
            version-manager-test:
              image: ${{ needs.docker-build.outputs.version-tag }}
          EOF
      
      - name: Run integration tests
        working-directory: figure-collector-integration-tests
        run: |
          docker compose -f docker-compose.integration.yml -f docker-compose.ci.yml up --abort-on-container-exit --exit-code-from integration-tests
      
      - name: Collect integration test results
        if: always()
        run: |
          docker compose -f figure-collector-integration-tests/docker-compose.integration.yml logs > integration-logs.txt
      
      - name: Upload integration test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: |
            figure-collector-integration-tests/test-results/
            figure-collector-integration-tests/integration-test-results/
            integration-logs.txt
          retention-days: 30

  # ============================================
  # STAGE 6: Performance & Load Testing
  # ============================================
  
  performance-tests:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run k6 performance tests
        uses: grafana/k6-action@v0.3.0
        with:
          filename: figure-collector-infra/performance-tests/load-test.js
          flags: --out json=results.json
      
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-results
          path: results.json
          retention-days: 30

  # ============================================
  # STAGE 7: Release & Deployment
  # ============================================
  
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [integration-tests, performance-tests]
    if: startsWith(github.ref, 'refs/tags/v')
    
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Generate changelog
        id: changelog
        uses: requarks/changelog-action@v1
        with:
          token: ${{ github.token }}
          tag: ${{ github.ref_name }}
      
      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          draft: false
          makeLatest: true
          name: ${{ github.ref_name }}
          body: ${{ steps.changelog.outputs.changes }}
          token: ${{ github.token }}
      
      - name: Update version manifests
        run: |
          echo "Updating version manifests for release ${{ github.ref_name }}"
          # Update version.json files across services

  # ============================================
  # STAGE 8: Deploy to Environment
  # ============================================
  
  deploy:
    name: Deploy to ${{ inputs.environment || 'staging' }}
    runs-on: ubuntu-latest
    needs: [integration-tests]
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ inputs.environment || 'staging' }}
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to Coolify
        id: deploy
        run: |
          # Deployment to Coolify instance
          echo "Deploying to ${{ inputs.environment || 'staging' }}"
          # Add actual deployment commands here
      
      - name: Run smoke tests
        run: |
          # Run basic health checks on deployed services
          echo "Running smoke tests..."

  # ============================================
  # STAGE 9: Artifact Management
  # ============================================
  
  artifact-retention:
    name: Manage Build Artifacts
    runs-on: ubuntu-latest
    needs: [docker-build, integration-tests]
    if: always()
    
    steps:
      - name: Generate build manifest
        run: |
          cat > build-manifest.json << EOF
          {
            "build_number": "${{ github.run_number }}",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "services": {
              "backend": "${{ needs.docker-build.outputs.backend-tag }}",
              "frontend": "${{ needs.docker-build.outputs.frontend-tag }}",
              "scraper": "${{ needs.docker-build.outputs.scraper-tag }}",
              "version-manager": "${{ needs.docker-build.outputs.version-tag }}"
            }
          }
          EOF
      
      - name: Upload build manifest
        uses: actions/upload-artifact@v4
        with:
          name: build-manifest-${{ github.run_number }}
          path: build-manifest.json
          retention-days: 30
      
      - name: Clean old artifacts
        uses: c-hive/gha-remove-artifacts@v1
        with:
          age: '30 days'
          skip-tags: true
          skip-recent: 10

  # ============================================
  # STAGE 10: Notifications
  # ============================================
  
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [security-scan, code-quality, build-test-matrix, docker-build, integration-tests]
    if: always()
    
    steps:
      - name: Determine build status
        id: status
        run: |
          if [[ "${{ needs.integration-tests.result }}" == "success" ]]; then
            echo "status=success" >> $GITHUB_OUTPUT
            echo "emoji=✅" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "emoji=❌" >> $GITHUB_OUTPUT
          fi
      
      - name: Send Slack notification
        if: vars.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ steps.status.outputs.status }}
          text: |
            ${{ steps.status.outputs.emoji }} Build #${{ github.run_number }} ${{ steps.status.outputs.status }}
            Repository: ${{ github.repository }}
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}