name: Infrastructure CI Pipeline

on:
  push:
    branches: [main, develop, release/*, feature/*]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  DOCKER_BUILDKIT: 1
  COMPOSE_DOCKER_CLI_BUILD: 1

jobs:
  # ============================================
  # STAGE 1: Security & Configuration Validation
  # ============================================

  security-scan:
    name: Security & Configuration Scanning
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Scan Docker configurations
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM'

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      # Validate Docker Compose files
      - name: Validate Docker Compose configurations
        run: |
          docker compose -f docker-compose.yml config
          docker compose -f docker-compose.test.yml config

      # Check for secrets in code
      - name: Detect secrets
        uses: trufflesecurity/trufflehog@main
        continue-on-error: true  # Don't fail on unverified findings
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --only-verified

  # ============================================
  # STAGE 2: Infrastructure Tests
  # ============================================

  infra-tests:
    name: Infrastructure Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Test shell scripts
      - name: Shellcheck
        run: |
          sudo apt-get update && sudo apt-get install -y shellcheck
          find . -name "*.sh" -type f | xargs shellcheck || true

      # Test Docker build
      - name: Test Docker Compose build
        run: |
          docker compose build --no-cache

      # Validate deployment scripts
      - name: Validate deployment scripts
        run: |
          bash -n deploy.sh
          bash -n scripts/*.sh || true

      # Test environment configurations
      - name: Validate environment files
        run: |
          for env_file in .env.example .env.dev .env.test .env.prod; do
            if [ -f "$env_file" ]; then
              echo "Checking $env_file..."
              # Check for required variables
              grep -q "MONGODB_URI" "$env_file" || echo "Warning: MONGODB_URI not found in $env_file"
              grep -q "JWT_SECRET" "$env_file" || echo "Warning: JWT_SECRET not found in $env_file"
            fi
          done

  # ============================================
  # STAGE 3: SonarCloud Analysis (Infra-specific)
  # ============================================

  sonarcloud:
    name: SonarCloud Analysis (Optional)
    runs-on: ubuntu-latest
    # Make this job optional - continue even if it fails
    continue-on-error: true

    steps:
      - name: Check for SONAR_TOKEN
        id: check_token
        run: |
          if [ -n "${{ secrets.SONAR_TOKEN }}" ]; then
            echo "token_exists=true" >> $GITHUB_OUTPUT
          else
            echo "token_exists=false" >> $GITHUB_OUTPUT
            echo "⚠️ SONAR_TOKEN not configured - skipping SonarCloud analysis"
          fi

      - name: Checkout code
        if: steps.check_token.outputs.token_exists == 'true'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        if: steps.check_token.outputs.token_exists == 'true'
        uses: SonarSource/sonarqube-scan-action@v3.1.0
        with:
          args: >
            -Dsonar.host.url=https://sonarcloud.io
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # ============================================
  # STAGE 4: Documentation Validation
  # ============================================

  documentation:
    name: Documentation Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check README
        run: |
          if [ ! -f "README.md" ]; then
            echo "ERROR: README.md not found"
            exit 1
          fi

      - name: Check required documentation
        run: |
          required_docs=("README.md" "DEPLOYMENT.md")
          for doc in "${required_docs[@]}"; do
            if [ ! -f "$doc" ]; then
              echo "Warning: $doc not found"
            fi
          done

  # ============================================
  # Final Status Check
  # ============================================

  status-check:
    name: CI Status Check
    runs-on: ubuntu-latest
    needs: [security-scan, infra-tests, sonarcloud, documentation]
    if: always()

    steps:
      - name: Check CI Status
        run: |
          if [[ "${{ contains(needs.*.result, 'failure') }}" == "true" ]]; then
            echo "CI pipeline failed"
            exit 1
          fi
          echo "CI pipeline passed successfully"